// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/games": {
            "post": {
                "description": "create new game",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "create new game",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/games/{gameID}": {
            "get": {
                "description": "get game by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "get game by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of the game",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Game"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            },
            "patch": {
                "description": "place mark into the field",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "place mark into the field",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of the game",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Step coords",
                        "name": "step",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Step"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid game state",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "401": {
                        "description": "Need to be authorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "404": {
                        "description": "Game with provided id is not found",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "409": {
                        "description": "Cell already occupied",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Something went wrong",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/games/{gameID}/history": {
            "get": {
                "description": "get game history",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "get game history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of the game",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "404": {
                        "description": "Game with provided id is not found",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Something went wrong",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/games/{gameID}/login": {
            "patch": {
                "description": "login into the game",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "login into the game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of the game",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid game state",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "401": {
                        "description": "Need to be authorized",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "404": {
                        "description": "Game with provided id is not found",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "409": {
                        "description": "User already in game",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Something went wrong",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/games/{gameID}/subscribe": {
            "get": {
                "description": "subscribe to the game updates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game"
                ],
                "summary": "subscribe to the game updates",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id of the game",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "404": {
                        "description": "Game with provided id is not found",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Something went wrong",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/login": {
            "post": {
                "description": "logins to the application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "login to the app",
                "parameters": [
                    {
                        "description": "Data of new user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/logout": {
            "get": {
                "description": "logouts from the application",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "logout from the app",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/registration": {
            "post": {
                "description": "creates new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "register new user",
                "parameters": [
                    {
                        "description": "Data of new user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        },
        "/api/v1/ping": {
            "get": {
                "description": "pong",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "healthcheck"
                ],
                "summary": "pong",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Game": {
            "type": "object",
            "properties": {
                "current_player": {
                    "$ref": "#/definitions/domain.User"
                },
                "current_state": {
                    "$ref": "#/definitions/domain.State"
                },
                "field": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/domain.Mark"
                        }
                    }
                },
                "id": {
                    "type": "integer"
                },
                "opponent": {
                    "$ref": "#/definitions/domain.User"
                },
                "owner": {
                    "$ref": "#/definitions/domain.User"
                },
                "step_count": {
                    "type": "integer"
                },
                "winner": {
                    "$ref": "#/definitions/domain.User"
                }
            }
        },
        "domain.Mark": {
            "type": "string",
            "enum": [
                "X",
                "0"
            ],
            "x-enum-varnames": [
                "ownerMark",
                "opponentMark"
            ]
        },
        "domain.State": {
            "type": "string",
            "enum": [
                "pending",
                "in_game",
                "done"
            ],
            "x-enum-varnames": [
                "PendingState",
                "InGameState",
                "DoneState"
            ]
        },
        "domain.Step": {
            "type": "object",
            "properties": {
                "col": {
                    "type": "integer"
                },
                "row": {
                    "type": "integer"
                }
            }
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "http.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "http.UserRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 4
                },
                "username": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 3
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Swagger of ttt-online",
	Description:      "Tic-Tac-Toe online",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
